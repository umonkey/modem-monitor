#!/usr/bin/env python
# vim: set tw=0:
#
# http://stackoverflow.com/questions/2379525/programming-huawei-e220
# http://m2msupport.net/m2msupport/tutorial-for-huawei-modules/
# https://wiki.archlinux.org/index.php/3G_and_GPRS_modems_with_pppd#Huawei_unsolicited_report_command_reference

import datetime
import glob
import os
import re
import sys
import time
import traceback

import serial


ENABLE_ROAMING = False

#OPERATOR_ID = 25002  # 25001=MTS-RUS, 25002=MegaFon RUS, 25011=Yota, 25020=TELE2 RU, 25099=Beeline, 25702=MTS BY
#OPERATOR_ID = 25001  # 25001=MTS-RUS, 25002=MegaFon RUS, 25011=Yota, 25020=TELE2 RU, 25099=Beeline, 25702=MTS BY
OPERATOR_ID = None

RSSI_LOG = "~/.rssi.log"
RSSI_LAST = "~/.rssi.last"
MODEM_LOG = '~/modem.log.%Y%m%d'
MODEM_LAST = os.path.expanduser("~/modem-last.txt")

OPERATORS = {
    25001: "MTS-RUS",
    25002: "MegaFon RUS",
    25011: "Yota",
    25020: "TELE2 RU",
    25099: "Beeline",
    25701: "BY VELCOM",
    25702: "MTS BY",
}


def find_device():
    """
    Find the proper tty device using USB bus lookup.
    """
    files = glob.glob('/sys/bus/usb-serial/drivers/option1/ttyUSB*')
    ids = [int(os.path.basename(f)[6:]) for f in files]
    if ids:
        ids.sort()
        return '/dev/ttyUSB%d' % ids[-1]
    else:
        return None


def set_title(title):
    term = os.getenv('TERM')
    if term.startswith('screen'):
        print("\033k\033\134\033k%s\033\134" % title)
    else:
        pass

def unset_title():
    set_title('shell')


def mbit(bps):
    return float(bps) / 1048576


class Monitor(object):
    RSSI_DELAY = 15

    def __init__(self, path):
        self.path = path

        # List of supported commands, obtained by CLAC.
        self.at_commands = []

        # Command queue: (send, expect, handler).
        self.command_queue = []

        # Command being processed.  Moved here from the queue after being sent out.
        self.current_command = None

        # Response queue.
        self.response_queue = []

        self.rssi = None
        self.rssi_ts = time.time()

        self.rscp = None
        self.ecio = None

        self.registered = False
        self.registered_text = None

        self.mode = None
        self.srv_domain = None
        self.srv_mode = None
        self.srv_submode = None
        self.bytes_in = None
        self.bytes_out = None
        self.dev_manuf = None
        self.dev_model = None
        self.dev_revision = None
        self.imei = None
        self.restricted = None
        self.connected = None  # duration, str
        self.ip_addr = None
        self.data_sent = None  # str
        self.data_rcvd = None  # str
        self.now_dl = None
        self.max_dl = None
        self.now_ul = None
        self.max_ul = None
        self.lac = None
        self.cellid = None
        self.rssi_log = []
        self.simlock = None
        self.sim_status = None
        self.can_read_sms = False
        self.can_send_sms = False
        self.can_read_cbs = False
        self.lasterr = None

        self.operator = None
        self.oplist = {}
        self.oplist_ts = 0

        self.have_hcsq = False

        self.mlog_name = self.get_log_name()
        self.mlog = open(self.mlog_name, 'a')

        self.reopen()

    def read(self):
        line = self.f.readline(10240)
        return line.strip()

    def reopen(self):
        self.f = None
        self.log("opening port %s" % self.path)
        self.f = serial.Serial(self.path, 57600, timeout=5, rtscts=True, dsrdtr=True)

    def write(self, command):
        self.log("> \033[1m%s\033[0m" % command)
        self.f.write(command + "\r\n\r\n")
        self.f.flush()

    def log(self, message):
        # print >> sys.stderr, "... %s" % message.strip()

        fname = self.get_log_name()
        if fname != self.mlog_name:
            self.mlog_name = fname
            self.mlog.close()
            self.mlog = open(self.mlog_name, 'a')

        ts = time.strftime("%Y-%m-%d %H:%M:%S")
        self.mlog.write("%s %s\n" % (ts, message.strip()))
        self.mlog.flush()

    def get_log_name(self):
        date = datetime.date.today()

        parts = {
            '%Y': '%04u' % date.year,
            '%m': '%02u' % date.month,
            '%d': '%02u' % date.day,
        }

        name = MODEM_LOG
        for k, v in parts.items():
            name = name.replace(k, v)

        name = os.path.expanduser(name)

        return name

    def display(self):
        text = ""
        text += "Path         : %s\n" % self.path

        parts = []
        if self.dev_manuf:
            parts.append(self.dev_manuf)
        if self.dev_model:
            parts.append(self.dev_model)
        if self.dev_revision:
            parts.append("rev. %s" % self.dev_revision)
        if self.imei:
            parts.append("IMEI=%s" % self.imei)
        if not parts:
            parts.append("no data")
        text += "Device       : %s\n" % " ".join(parts)

        lock = self.simlock or "no data"
        text += "Device lock  : %s\n" % lock

        dbm = lambda value: 'no data' if value is None else '%4d dBm' % value

        parts = []
        parts.append('RSSI = %8s' % dbm(self.get_rssi_dbm()))
        parts.append('RSCP = %8s' % dbm(self.rscp))
        parts.append('ECIO = %8s' % dbm(-self.ecio if self.ecio is not None else None))
        text += "Signal level : %s\n" % ", ".join(parts)

        parts = []
        if self.rssi is None:
            parts.append('no data')
        else:
            parts.append('%d' % self.rssi)
        if self.rssi_log:
            parts.append("log: %s" % " ".join(self.rssi_log))
        text += "RSSI         : %s\n" % ", ".join(parts)

        parts = []
        if self.sim_status:
            parts.append(self.sim_status)
        if self.srv_domain == 0:
            parts.append('no service')
        elif self.srv_domain == 1:
            parts.append('voice only')
        elif self.srv_domain == 2:
            parts.append('data only')
        elif self.srv_domain == 3:
            parts.append('voice + data')
        text += "SIM status   : %s\n" % ', '.join(parts)

        parts = []
        if self.operator:
            parts.append(self.operator)
        if self.lac:
            parts.append("LAC: %s" % self.lac)
        if self.cellid:
            parts.append("CellID: %s" % self.cellid)
        if self.can_send_sms and self.can_read_sms:
            parts.append("+sms")
        if self.can_read_cbs:
            parts.append("+cb")
        if self.srv_mode and self.srv_submode:
            parts.append('%s / %s' % (self.get_srv_mode(), self.get_srv_submode()))
        elif self.srv_mode:
            parts.append(self.get_srv_mode())
        text += "Network      : %s\n" % ", ".join(parts)

        parts = []
        for k, v in sorted(self.oplist.items()):
            parts.append("%s (%u)" % (v, k))
        if not parts:
            parts = ["no data"]
        text += "Operators    : %s\n" % ", ".join(parts)

        parts = []
        if self.connected:
            parts.append(self.connected)
        if not parts:
            parts.append("no data")
        if self.ip_addr:
            parts.append('IP address: %s' % self.ip_addr)
        text += "Connected for: %s\n" % " ".join(parts)

        parts = []
        if self.data_rcvd:
            parts.append("%s received" % self.data_rcvd)
        if self.data_sent:
            parts.append("%s sent" % self.data_sent)
        if not parts:
            parts.append("no data")
        text += "Traffic      : %s\n" % ", ".join(parts)

        parts = []
        if self.now_dl:
            parts.append("%.02f dl" % mbit(self.now_dl))
        if self.now_ul:
            parts.append("%.02f ul" % mbit(self.now_ul))
        text += "Speed        : %s\n" % ", ".join(parts)

        parts = []
        if self.max_dl:
            parts.append("%.02f dl" % mbit(self.max_dl))
        if self.max_ul:
            parts.append("%.02f ul" % mbit(self.max_ul))
        text += "Top speed    : %s\n" % ", ".join(parts)

        text += "Last error   : %s\n" % (self.lasterr or "none")
        text += "Last update  : %s\n" % time.strftime("%Y-%m-%d %H:%M:%S")

        print "\x1bc" + text,  # clear screen

        with open(MODEM_LAST, "wb") as f:
            f.write(text)

        self.set_title()

    def offline(self):
        pass  # do something

    def set_cellid(self, cellid):
        if type(cellid) == str:
            if cellid.startswith('0x'):
                cellid = int(cellid[2:], 16)
            else:
                cellid = int(cellid)
        else:
            cellid = int(cellid)

        if self.cellid != cellid:
            self.cellid = cellid
            self.log('CellID changed to %d' % self.cellid)

    def set_ecio(self, ecio):
        """Quality cleanness.

        0 to -6 = excellent
        -7 to -10 = good
        -11 to -20 = poor

        https://wiki.teltonika-networks.com/view/EC/IO
        """
        assert(type(ecio) == float)

        if self.ecio != ecio:
            self.ecio = ecio
            self.log('ECIO changed to %.1f' % ecio)

    def set_registered(self, registered, text):
        self.registered_text = text

        if registered and self.registered == False:
            self.registered = True
            self.request_balance()

        elif self.registered and not registered:
            self.registered = False
            self.queue('AT+COPS?', None, self.on_cops, '+COPS')  # query operators

    def set_rscp(self, rscp):
        assert(type(rscp) == int)

        if self.rscp != rscp:
            self.rscp = rscp
            self.log('RSCP changed to %d dBm' % rscp)

    def set_rssi(self, rssi):
        assert(type(rssi) == int)
        assert(rssi >= 0)

        self.rssi_ts = time.time()
        if rssi != self.rssi:
            if self.rssi is not None:
                self.rssi_log.insert(0, str(self.rssi))
            del self.rssi_log[10:]

            self.rssi = rssi

            self.log('RSSI changed to %u dBm (%u)' % (-113 + rssi * 2, rssi))

            with open(os.path.expanduser(RSSI_LOG), "a") as f:
                f.write("%s %s\n" % (time.strftime("%Y-%m-%d %H:%M:%S"), rssi))

            with open(os.path.expanduser(RSSI_LAST), "wb") as f:
                f.write(str(rssi))

    def get_rssi(self):
        if self.rssi is None:
            return None
        elif self.rssi < 0:
            return (113 - self.rssi) / 2
        else:
            return self.rssi

    def get_rssi_dbm(self):
        if self.rssi is None:
            return None
        elif self.rssi < 0:
            return self.rssi
        else:
            return -113 + self.rssi * 2

    def set_sinr(self, value):
        assert(isinstance(value, float))
        self.log('SINR = %.1f dBm' % value)

    def set_rsrq(self, value):
        assert(isinstance(value, float))
        self.log('RSRQ = %.1f dBm' % value)

    def set_srv_mode(self, mode):
        assert(isinstance(mode, int))

        if self.srv_mode != mode:
            self.srv_mode = mode
            self.log('Service mode changed to %d' % mode)

    def get_srv_mode(self):
        modes = {0: 'disconnected', 1: 'AMPS', 2: 'CDMA', 3: 'GPRS', 4: 'HDR', 5: 'WCDMA', 6: 'GPS', 7: 'GSM/WCDMA', 8: 'CDMA/HDR', 9: 'LTE', 15: 'TS-SCDMA'}
        return modes.get(self.srv_mode)

    def set_srv_submode(self, submode):
        assert(isinstance(submode, int))

        if self.srv_submode != submode:
            self.srv_submode = submode
            self.log('Service submode changed to %d' % submode)

    def get_srv_submode(self):
        submodes = {0: 'no service', 1: 'GSM', 2: 'GPRS', 3: 'EDGE', 4: 'WCDMA', 5: 'HSDPA', 6: 'HSUPA', 7: 'HSDPA+HSUPA', 8: 'TS-CDMA', 9: 'HSPA+', 17: 'HSPA+ (64QAM)', 18: 'HSPA+ (MIMO)'}
        return submodes.get(self.srv_submode)

    def set_title(self):
        if self.rssi is not None:
            title = "RSSI=%u" % self.rssi

        elif self.dev_model is not None:
            title = self.dev_model

        else:
            title = "modem-monitor"

        set_title(title)

    def set_mode(self, mode):
        if self.mode != mode:
            self.mode = mode
            self.log("Network mode changed to %s" % mode)

    def rssi_to_dbm(self, rssi):
        if rssi is None:
            return None
        return -113 + rssi * 2

    def on_anquery(self, lines):
        """Antenna query response.

        > AT^ANQUERY?
        < ^ANQUERY:93,6,10,4,0x7C8348

        [1] 93 = RSCP (dBm)
        [2] 6 = ECIO
        [3] 10 = RSSI
        [4] 4 = antenna level (?)
        [5] 0x7C8348 = Cell ID
        [6] ???
        """

        m = re.match(r'^\^ANQUERY:(.+)$', lines[0])
        if m is not None:
            values = m.group(1).split(',')
            self.set_rscp(- int(values[0]))
            self.set_ecio(float(values[2]))
            self.set_rssi(int(values[3]))
            self.set_cellid(str(values[4]))
        else:
            self.rssi_ts = time.time()
            self.log("bad anquery response")

    def on_sysinfo(self, lines):
        """Handle system status information.

        > AT^SYSINFO
        < ^SYSINFO:2,2,0,5,1,,4

        [1] 2 = srv_status
        [2] 2 = srv_domain
        [3] 0 = roam_status
        [4] 5 = sys_mode
        [5] 1 = sim_state
        [6]   = reserved
        [7] 4 = sys_submode

        srv_status:
        0 = no service
        1 = restricted service
        2 = valid service
        3 = restricted regional service
        4 = power-saving and deep sleep

        srv_domain:
        0 = no service
        1 = only cs (voice)
        2 = only ps (data)
        3 = cs + ps (voice and data)
        4 = not registered (searching)

        roam_status:
        0 = not roaming
        1 = roaming

        sys_mode:
        0 = no service
        1 = amps service
        2 = cdma service
        3 = gsm / gprs
        4 = hdr mode
        5 = wcdma mode
        6 = gps mode
        7 = gsm / wcdma
        8 = cdma / hdr hybrid
        15 = ts-scdma mode

        sim_state:
        0 = invalid or pin locked
        1 = valid
        2 = invalid for cs (voice)
        3 = invalid for ps (data)
        4 = invalid for cs or ps
        255 = missing

        sys_submode:
        0 = no service
        1 = gsm mode
        2 = gprs mode
        3 = edge mode
        4 = wcdma mode
        5 = hsdpa mode
        6 = hsupa mode
        7 = hsdpa + hsupa mode
        8 = td-scdma mode
        9 = hspa+ mode
        17 = hspa+ (64qam) mode
        18 = hspa+ (mimo) mode
        """

        m = re.match(r'^\^SYSINFO:([0-9,]+)$', lines[0])
        if m is not None:
            values = [int(v) if v else None for v in m.group(1).split(',')]
            srv_status, srv_domain, roam_status, sys_mode, sim_state, _, sys_submode = values

            self.restricted = srv_status in (1, 3)
            self.roaming = roam_status == 1
            self.srv_domain = srv_domain

            self.set_srv_mode(int(sys_mode))
            self.set_srv_submode(int(sys_submode))

            states = {0: 'invalid or locked', 1: 'valid', 2: 'voice only', 3: 'data only', 4: 'voice + data', 255: 'missing'}
            self.sim_status = states.get(sim_state, 'unknown')

    def on_csms(self, lines):
        """Check if device supports SMS.
        http://www.developershome.com/sms/checkCommandSupport2.asp
        """
        m = re.match(r'^\+CSMS: (.+)$', lines[0])
        if m is not None:
            parts = m.group(1).split(",")
            for idx, v in enumerate(parts):
                if idx == 1:
                    self.can_read_sms = v == "1"
                elif idx == 2:
                    self.can_send_sms = v == "1"
                elif idx == 3:
                    self.can_read_cbs = v == "1"

    def on_csnr(self, lines):
        pass

    def on_csq(self, lines):
        m = re.match(r'^\+CSQ: (\d+),(\d+)', lines[0])
        if m is not None:
            rssi = int(m.group(1))
            self.set_rssi(rssi)

    def on_dsflowrpt(self, args):
        for idx, v in enumerate(args.split(",")):
            if idx == 0:
                dur = int(v, 16)
                h = dur / 3600
                m = (dur % 3600) / 60
                s = dur % 60
                self.connected = "%u:%02u:%02u" % (h, m, s)
                # self.log("[1] connected for %s" % self.connected)

            elif idx == 1:
                s = int(v, 16) * 8
                self.now_ul = s
                self.max_ul = max(s, self.max_ul)
                # self.log("[2] ul speed is %.2f kbps" % s)

            elif idx == 2:
                s = int(v, 16) * 8
                self.now_dl = s
                self.max_dl = max(s, self.max_dl)
                # self.log("[3] dl speed is %.2f kbps" % s)

            elif idx == 3:
                self.bytes_out = int(v, 16)
                self.data_sent = "%.2f mb" % (float(self.bytes_out) / 1048576)
                # self.log("[4] sent %s" % self.data_sent)

            elif idx == 4:
                self.bytes_in = int(v, 16)
                self.data_rcvd = "%.2f mb" % (float(self.bytes_in) / 1048576)
                # self.log("[5] received %s" % self.data_rcvd)

            elif idx == 5:
                s = float(int(v, 16) * 8) / 1000
                # self.log("[6] ul speed limit is %.2f kbps" % s)

            elif idx == 6:
                s = float(int(v, 16) * 8) / 1000
                # self.log("[7] dl speed limit is %.2f kbps" % s)

    def on_cgpaddr(self, lines):
        if not lines:
            return
        m = re.match(r'^\+CGPADDR: 1,"([0-9.]+)"$', lines[0])
        if m is not None:
            addr = m.group(1)
            if addr != self.ip_addr:
                self.ip_addr = addr
                self.log('IP address changed to %s' % addr)

    def on_rssi_unsolicited(self, value):
        if not self.have_hcsq:
            self.set_rssi(int(value))
        else:
            self.log('old-style rssi=%d report ignored.' % int(value))

    def on_hcsq_unsolicited(self, value):
        values = value.split(',')

        self.have_hcsq = True

        if values[0] == '"WCDMA"':
            if len(values) >= 2:
                dbm = -121 + int(values[1])
                val = (113 + dbm) / 2
                self.set_rssi(val)

            if len(values) >= 3:
                self.set_rscp(-121 + int(values[2]))

            if len(values) >= 4:
                self.set_ecio(-32.5 + float(values[3]) * 0.5)

            self.set_srv_mode(5)

        elif values[0] == '"LTE"':
            # ^HCSQ:"LTE",40,36,146,32
            if len(values) >= 2:
                dbm = -121 + int(values[1])
                val = (113 + dbm) / 2
                self.set_rssi(val)

            if len(values) >= 3:
                self.set_rscp(-141 + int(values[2]))

            if len(values) >= 4:
                self.set_sinr(-20.0 + float(values[3]) * 0.2)

            elif len(values) >= 5:
                self.set_rsrq(-20.0 + float(values[4]) * 0.5)

            self.set_srv_mode(9)

    def on_mode_urc(self, mode, submode):
        self.set_srv_mode(int(mode))
        self.set_srv_submode(int(submode))

    def on_cops(self, lines):
        """Operator list response.

        > AT+COPS?
        < +COPS: 0,0,"MTS BY",2
        """
        if lines[0].startswith('+COPS: ('):
            return self.on_cops_list(lines)

        m = re.match(r'^\+COPS: (.+)$', lines[0])
        if m is not None:
            cells = m.group(1).split(',')
            if len(cells) < 2:
                return
            value = cells[2]
            if value.isdigit():
                self.operator = OPERATORS.get(int(value))
            else:
                self.operator = value.strip('"')

    def on_cops_list(self, lines):
        """Handle the operator list.

        Example command: +COPS: (1,"MegaFon RUS","MegaFon","25002",2),(2,"MTS BY","MTS","25702",2),(1,"MTS-RUS","MTS","25001",2),(1,"TELE2 RU","TELE2 RU","25020",2),,(0,1,2,3,4),(0,1,2)
        +COPS: (2,"MegaFon RUS","MegaFon","25002",2),(1,"MegaFon RUS","MegaFon","25002",7),(1,"MTS RUS","MTS RUS","25001",7),(1,"MTS RUS","MTS RUS","25001",2),(1,"","","25011",7),(1,"BY VELCOM","VELCOM","25701",2),(1,")

        Meaning: (status, symbolic name, display name, code, AcT)
        Status: 1 = available, 2 = current (connected).
        AcT: 0 = GSM, 2 = UTRAN, 7 = E-UTRAN.
        """
        self.operator = None
        self.oplist = {}

        for item in re.findall(r'\([^)]+\)', args):
            parts = item[1:-2].split(",")
            for idx, v in enumerate(parts):
                if idx == 0 and int(v) == 1:
                    name = parts[1].strip('"')
                    code = int(parts[3].strip('"'))
                    self.oplist[code] = name

                elif idx == 0 and int(v) == 2:
                    name = parts[1].strip('"')
                    code = int(parts[3].strip('"'))
                    self.oplist[code] = name
                    self.operator = name

        self.oplist_ts = time.time()

    def on_cardlock(self, lines):
        """Check SIM card lock status.

        > AT^CARDLOCK?
        < ^CARDLOCK: 2,10,0

        [1] 2 = 

        """
        m = re.match(r'^\^CARDLOCK: (\d+),(\d+),(\d+)$', lines[0])
        if m is not None:
            v1 = m.group(1)

            if v1 == '2':
                self.simlock = 'unlocked'
            elif v1 == '3':
                self.simlock = 'dead locked'
            elif v1 == '1':
                self.simlock = 'locked, %s unlock attempts left' % m.group(2)

    def queue(self, command, expect=None, handler=None, need=None):
        """Queue a command.

        The command will be sent to the device when the incoming buffer is empty (i.e., previous command finished).
        Then the output will be collected, until the expect string is received.
        Then the handler will be called with all received lines.
        """
        if expect is None:
            expect = ('OK', 'ERROR')
        elif isinstance(expect, str):
            expect = (expect, )

        if handler is None:
            handler = self.on_dummy

        if need is not None and need not in self.at_commands:
            self.log('command %s not supported -- not sending' % command)
            return  # command not supported

        self.command_queue.append((command, expect, handler))

    def on_ati(self, lines):
        """Handle ATI: device info."""
        for line in lines:
            if ':' not in line:
                self.log('bad ati response: %s' % line)
                continue

            (k, v) = line.split(': ', 1)
            if k == 'Manufacturer':
                self.dev_manuf = v
                self.log('device manufacturer: %s' % v)
            elif k == 'Model':
                self.dev_model = v
                self.log('device model: %s' % v)
            elif k == 'IMEI':
                self.imei = v
                self.log('device imei: %s' % v)
            elif k == 'Revision':
                self.dev_revision = v
                self.log('device revision: %s' % v)
            elif k == '+GCAP':
                self.log('device capabilities: %s' % v)

    def on_cgdcont(self, lines):
        self.log('That was the APN list.')

    def on_clac(self, lines):
        """Handle CLAC: list of supported commands."""
        self.at_commands = lines
        self.log('Updated the list of supported commands.')

        self.go_ahead()

    def on_creg(self, lines):
        """Handle +CREG: registration status.
        http://m2msupport.net/m2msupport/atcreg-network-registration/
        """
        for line in lines:
            if line.startswith('+CREG: '):
                args = line[7:].split(',')
                for idx, v in enumerate(args):
                    if idx == 0:
                        smode = None
                        connected = False

                        if v == '0':
                            smode = 'idle'
                        elif v == '1':
                            smode = 'registered'
                            connected = True
                        elif v == '2':
                            smode = 'searching'
                        elif v == '3':
                            smode = 'denied'
                        elif v == '4':
                            smode = 'unknown'
                        elif v == '5':
                            smode = 'roaming'
                            connected = True
                        elif v == '6':
                            smode = 'sms-only'
                            connected = True
                        elif v == '7':
                            smode = 'roaming, sms-only'
                            connected = True
                        elif v == '8':
                            smode = 'emergency'
                            connected = True

                        self.set_registered(connected, smode)

                    elif idx == 1:
                        mode = None

                        if v == '0':
                            mode = 'GSM'
                        elif v == '1':
                            mode = 'GSM Compact'
                        elif v == '2':
                            mode = 'UTRAN'
                        elif v == '3':
                            mode = 'EGPRS'
                        elif v == '4':
                            mode = 'UTRAN +HSDPA'
                        elif v == '5':
                            mode = 'UTRAN +HSUPA'
                        elif v == '6':
                            mode = 'UTRAN +HSDPA +HSUPA'
                        elif v == '7':
                            mode = 'E-UTRAN'
                        else:
                            mode = 'unknown'

                        self.mode = mode

                    elif idx == 2:
                        self.lac = v

                    elif idx == 3:
                        self.cellid = v

        self.log('Network status updated.')

    def on_dummy(self, lines):
        self.log('Response ignored.')

    def on_echo_off(self, lines):
        self.log('echo turned off')

    def on_unsolicited(self, line):
        """Handle unsolicited responses: status change, etc."""

        def callback(pattern, handler):
            m = re.match(pattern, line)
            if m:
                args = m.groups()
                try:
                    handler(*args)
                except:
                    print(line)
                    print(args)
                    raise

        for m in re.findall(r'^\+ZOPERTER: ', line):
            # Ping the idle link.
            self.queue('AT', None, self.on_dummy)
            return

        callback(r'^\^DSFLOWRPT:([0-9A-F,]+)$', self.on_dsflowrpt)
        callback(r'^\^RSSI: (\d+)$', self.on_rssi_unsolicited)
        callback(r'^\^HCSQ:(.+$)$', self.on_hcsq_unsolicited)
        callback(r'^\^MODE: (\d+),(\d+)$', self.on_mode_urc)

    def on_zsec(self, lines):
        for line in lines:
            for m in re.findall(r'^\+ZSEC: (\d+),(\d+)$', line):
                for idx, v in enumerate(m):
                    if idx == 0:
                        pass

                    elif idx == 1:
                        locked = "unlocked"

                        if v == '1':
                            self.log('Network locked.')
                            locked = 'network'
                        elif v == '2':
                            self.log('SIM locked')
                            locked = 'sim'
                        elif v == '3':
                            self.log('SIM and network locked')
                            locked = 'sim, network'

                        self.simlock = locked

    def go_ahead(self):
        """Send initial commands."""
        self.queue('ATE0', 'OK', self.on_echo_off)
        self.queue('ATI', 'OK', self.on_ati)
        self.queue('AT+CMEE=2')
        self.queue('AT+CGDCONT?', 'OK', self.on_cgdcont, '+CGDCONT')
        self.queue('AT^CARDLOCK?', None, self.on_cardlock, '^CARDLOCK')
        self.queue('AT^SYSINFO', None, self.on_sysinfo)
        self.queue('AT^SYSINFOEX', None, self.on_sysinfo)
        self.queue('AT^SYSCFG?')
        self.queue('AT^CURC=1')
        self.queue('AT^DSFLOWRPT=1')

        # Enable unsolicited registration info: status, location etc.
        self.queue('AT+CREG=2', None, None, '+CREG')
        self.queue('AT+CURC=1', None, None, '+CURC')

        # Check SIM lock.
        self.queue('AT+ZSEC?', None, self.on_zsec, '+ZTEST')

        # Enable all operators.
        self.log('Enabling all operators...')
        self.queue('AT+COPS=0', None, self.on_dummy, '+COPS')

        self.log('Requesting operator list...')
        self.queue('AT+COPS?', None, self.on_cops, '+COPS')  # query operators

        # Prefer 3G.
        self.queue('AT+ZSNT=2,0,0', None, self.on_dummy, '+ZTEST')
        self.queue('AT+ZPAS?', None, None, '+ZTEST')
        #self.queue('AT^SYSCFG=14,2,3fffffff,0,1', None, self.on_dummy, '^SYSCFG')

        # Manual registration:
        #self.queue('AT+COPS=1,2,"25001",2', None, self.on_dummy, '+COPS')

        # Request registration status.
        self.queue('AT+CREG?', None, self.on_creg, '+CREG')

        self.queue('AT^HSDPA=1', None, None, '^HSDPA')
        self.queue('AT^HSUPA=1', None, None, '^HSUPA')
        self.queue('AT^HSPA=3', None, None, '^HSPA')
        self.queue('AT+CSMS?', None, self.on_csms, '+CSMS')

        self.request_rssi()
        self.request_balance()

    def request_balance(self):
        # Request balance.
        # https://github.com/thedumbtechguy/USSD-PDU-Converters/blob/master/Converter.php
        self.queue('AT+CUSD=1,"AA184C3602",15', None, None, '+CUSD')

    def request_rssi(self):
        # Request signal quality.

        if '^ANQUERY' in self.at_commands:
            self.queue('AT^ANQUERY?', None, self.on_anquery)
        elif '^CSNR' in self.at_commands:
            self.queue('AT^CSNR?', None, self.on_csnr)
        elif '+CSQ' in self.at_commands:
            self.queue('AT+CSQ', None, self.on_csq)

        if '+CGPADDR' in self.at_commands:
            self.queue('AT+CGPADDR=1', None, self.on_cgpaddr)

        if '^SYSINFO' in self.at_commands:
            self.queue('AT^SYSINFO', None, self.on_sysinfo)

        if '^SYSINFOEX' in self.at_commands:
            self.queue('AT^SYSINFOEX', None, self.on_dummy)

    def handle_input(self):
        """Wait for one line, handle it, then return."""
        if self.current_command is None and self.command_queue:
            cmd = self.command_queue[0]
            del self.command_queue[0]

            self.write(cmd[0])
            self.current_command = cmd

        line = self.read()
        if line:
            self.log("< %s" % line)

            if self.current_command is not None:
                if line == '+CME ERROR: 10':
                    self.log('Error: SIM card not inserted')
                    self.sim_status = 'missing'

                # Handle expected response.
                if line in self.current_command[1] or line.startswith('+CME ERROR: '):  # OK, ERROR, etc.
                    result = self.response_queue
                    self.response_queue = []
                    try:
                        self.current_command[2](result)
                    except:
                        print(result)
                        raise
                    self.current_command = None
                else:
                    self.response_queue.append(line)

            else:
                # Handle unsolicited response.
                self.on_unsolicited(line)

            if time.time() - self.rssi_ts > self.RSSI_DELAY:
                self.log('RSSI data is outdated, requesting.')
                self.request_rssi()

    def monitor(self):
        self.queue('AT+CLAC', ('OK',), self.on_clac)

        while True:
            self.display()
            self.handle_input()


def try_once(device_path):
    try:
        mon = Monitor(device_path)
        while True:
            mon.monitor()
        return
    except Exception, e:
        print "Error:", e
        print traceback.format_exc()
    finally:
        pass


if __name__ == "__main__":
    if sys.argv[1:] == ["compress-log"]:
        RSSILogger.compress(RSSI_LOG)
        exit(0)

    try:
        device = find_device()
        if device is None:
            print 'Modem device not found.'
        else:
            try_once(device)
    except KeyboardInterrupt:
        print "Restarting in a second..."
